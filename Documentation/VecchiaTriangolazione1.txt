@startuml
start

:Inizializza idV_new, idE_new, idF_new;
:T = n^2;
:Inizializzo la struttura della mesh predisponendo 
spazio a sufficienza in base al tipo di poliedro 
di base indentificato da p e q;

if ((p,q) == (3,3)) then (yes)
  :V = 2*T+2;
  :E = 6*T;
  :F = 4*T;
elseif ((p,q) == (3,4)) then (yes)
  :V = 4*T+2;
  :E = 12*T;
  :F = 8*T;
elseif ((p,q) == (3,5)) then (yes)
  :V = 10*T+2;
  :E = 30*T;
  :F = 20*T;
endif

:Itera su ogni faccia del poliedro di base;
partition "Per ogni faccia" {
  :Prendi vertici v0, v1, v2;
  
  :Crea nuovi vertici con coordinate baricentriche 
  (moltiplico ogni vertice per una combinazione di coefficienti opportuna);
  :Proietto il nuovo vertice sulla sfera unitaria;
  if(il vertice creato non è presente nella mesh) then (sì)
    :Aggiungo il nuovo vertice (Cell0Ds);
  else
    :Restituisco l'id del vertice corrispondente già esistente;
  endif
  :Inserisco l'id dei vertici della faccia in una matrice, disposti per riga;

  :Genero i triangoli sfruttando gli indici delle posizioni nella matrice;
  :Controllo se i lati creati (Cell1Ds) esistono ed eventualmente il aggiungo alla mesh (CheckAddEdges);
    :Aggiungo le nuove facce create alla mesh (Cell2Ds);
   
}

:Inserisco i dati relativi a Cell3Ds 
nella mesh (id, veritici, lati, facce);

stop
@enduml
